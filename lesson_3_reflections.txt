When would you want to use a remote repository rather than keeping all your work local?
You would want to use a remote repository when you want to collaborate or share the work with other people or if you simply want to have your files accessible from the cloud so you can work on them or commit changes from any device.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
Having Git automatically pull updates from the remote repository would probably cause a lot of headaches. Say, for example, you're working on a branch that's also on the remote repository and a change is made there. If Git updated your files with the new changes, you'd either lose your work or could run into conflicting changes.
Letting the user manually pull changes would also let them decide if they even want the new changes or not.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Clones are copies of repositories that can exist on the same local machine or different places (like github and your local machine). You would use clones when you want a copy of a repository and even make changes to it.
Forks are like clones but exist only on GitHub. Forks would link back to the original repository but won't make any changes to it. You would use this when you want to copy the repository but keep your own version of it.
Branches are like paths for a repository where each branch can be a different version of the same files. You would branch when making changes that you don't want to be part of the master branch just yet but maybe merge it later on.

What is the benefit of having a copy of the last known state of the remote stored locally?
Having this stored locally would allow you to have the latest version of the remote files to work with offline (in case internet access is not available).

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
Without Git or Github (or other similar tools), doing things like splitting up work so that conflicts won't occur might be necessary. However, this becomes complicated when it comes to things like code where multiple people might need to make changes to the same lines. On the flip side, this may require more communication between collaborators so you might be on the "same page" more often and less likely to have to deal with conflicts like in Git.