What happens when you initialize a repository? Why do you need to do it?
Git creates a hidden directory and files that keep track of commit history and changes. Without using init, you won't be able to commit changes for version control.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area sets up the files and changes that are going to be committed. Having this will allow you to see exactly what changes you are making with each commit and will also allow multiple files to be committed at the same time.

How can you use the staging area to make sure you have one commit per logical change?
With the staging area, you can see what files and changes are going to be committed before actually performing the commit. This way, you can make sure the changes you're commiting are the ones you want (logically too).

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches would help whenever I want to deviate from the original path such as adding an experimental change or different version of the code (easy mode in asteroids or italian version).

How do the diagrams help you visualize the branch structure?
It helps you picture the commits of each branch and where they share a common point. You can also see which changes are a part of each branch.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging two branches together combines all the changes made to the files from both branches into one version. This effectively leads both branches into one (the master branch).

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Git makes it easier to combine code changes. However, it can't know what to merge all the time (in case of code conflicts). In this case, we have to determine what changes are needed in the final version.